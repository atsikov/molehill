<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="400" height="452" creationComplete="onCreationComplete(event)" title="Config Editor">
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			private var _configData:ConfigData;

			public function get configData():ConfigData
			{
				return _configData;
			}

			public function set configData(value:ConfigData):void
			{
				_configData = value;
			}

			private function onCreationComplete(event:Event):void
			{
				if (_configData == null)
				{
					_configData = new ConfigData();
				}
				
				update();
			}
			
			private var _sourceFile:File;
			private var _classFile:File;
			private var _atlasFile:File;
			
			private function update():void
			{
				title = _configData.path != "" ? "Edit config" : "New config";
				
				updateFiles();
				
				chkAsSpriteSheet.selected = _configData.combineSpriteSheet;
				chkCropImage.selected = _configData.cropWhitespace;
				chkEmbedSap.selected = _configData.embedAnimation;
				chkExtrudeEdges.selected = _configData.extrudeEdges;
				chkGenerateClass.selected = _configData.generateClass;
				chkHighlights.selected = _configData.createHighlights;
				chkIncludeNac.selected = _configData.includeBinAlpha;
				chkNeedCompression.selected = _configData.compressAtlas;
				chkAdvCompression.selected = _configData.advancedCompression;
				chkDXT.enabled = chkNeedCompression.selected;
				chkDXT.selected = _configData.useDXT;
				
				edtCompressionLevel.text = _configData.compressionLevel.toString();
				edtMipLevels.text = _configData.mipLevels.toString();
				edtTexturesGap.text = _configData.textureGap.toString();
				
				edtLabel.text = _configData.label;
				labelSource.text = _sourceFile != null ? _sourceFile.nativePath : "notSelected";
				
				chkUpdateClass.selected = _configData.updateClassFileEnabled;
				btnClassSource.enabled = _configData.updateClassFileEnabled;
				labelClassPath.enabled = _configData.updateClassFileEnabled;
				labelClassPath.text = _classFile != null ? _classFile.nativePath : "notSelected";
				edtClassPackage.text = _configData.updateClassFilePackage; 
				
				chkUpdateAtlas.selected = _configData.updateAtlasFileEnabled;
				btnAtlasSource.enabled = _configData.updateAtlasFileEnabled;
				labelAtlasPath.enabled = _configData.updateAtlasFileEnabled;
				labelAtlasPath.text = _atlasFile != null ? _atlasFile.nativePath : "notSelected";
				
				chkRemove.selected = _configData.removeTemp;
				
				chkUpdateClass.enabled = chkGenerateClass.selected;
				chkUpdateClass.selected = chkUpdateClass.selected && chkGenerateClass.selected;
				
				btnClassSource.enabled = chkUpdateClass.selected;
				labelClassPath.enabled = chkUpdateClass.selected;
				edtClassPackage.enabled = chkUpdateClass.selected;
				
				btnAtlasSource.enabled = chkUpdateAtlas.selected;
				labelAtlasPath.enabled = chkUpdateAtlas.selected;
				
				chkDXT.enabled = chkNeedCompression.selected;
				chkAdvCompression.enabled = !chkNeedCompression.selected;
				chkNeedCompression.enabled = !chkAdvCompression.selected;
			}
			
			private function updateFiles():void
			{
				try
				{
					_sourceFile = new File(_configData.listSourcePath[0])
				} 
				catch(error:Error) 
				{
					_sourceFile = null;
				}
				
				try
				{
					_classFile = new File(_configData.updateClassFilePath)
				} 
				catch(error:Error) 
				{
					_classFile = null;
				}
				
				try
				{
					_atlasFile = new File(_configData.updateAtlasFilePath)
				} 
				catch(error:Error) 
				{
					_atlasFile = null;
				}
			}
			
			private function save():void
			{
				if (chkUpdateAtlas.selected)
				{
					if (_atlasFile == null)
					{
						Alert.show("Atlas target file does not selected!");
						return;
					}
					
					if (!_atlasFile.exists)
					{
						Alert.show("Atlas target file does not exist!");
						return;
					}
					
					if ((_atlasFile.extension == "arf" && !chkNeedCompression.selected) ||
						(_atlasFile.extension == "brf" && chkNeedCompression.selected) ||
						(_atlasFile.extension != "arf" && _atlasFile.extension != "brf")
					)
					{
						Alert.show("Wrong atlas traget file!");
						return;
					}
				}
				
				if (chkUpdateClass.selected)
				{
					if (_classFile == null)
					{
						Alert.show("Class target file does not selected!");
						return;
					}
					
					if (!_classFile.exists)
					{
						Alert.show("Class target file does not exist!");
						return;
					}
					
					if (_classFile.extension != "as")
					{
						Alert.show("Wrong class traget file!");
						return;
					}
				}
				
				if (edtLabel.text == "")
				{
					Alert.show("Enter config title!", "", 4, null, selectTitleInput);
					return;
				}
				
				if (_configData.path == "")
				{
					var configFile:File = new File(ConfigListDataProvider.getInstance().lastPath);
					var fileName:String = edtLabel.text.replace(/\s+/g, "_");
					if (checkClassName(fileName))
					{
						configFile = configFile.resolvePath(fileName + ".dat");
					}
					
					configFile.addEventListener(Event.SELECT, onSaveFileChoosen);
					configFile.browseForSave("Save config file...");
					return;
				}
				
				_configData.combineSpriteSheet = chkAsSpriteSheet.selected;
				_configData.cropWhitespace = chkCropImage.selected;
				_configData.useDXT = chkDXT.selected;
				
				_configData.embedAnimation = chkEmbedSap.selected;
				_configData.generateClass = chkGenerateClass.selected;
				_configData.createHighlights = chkHighlights.selected;
				_configData.includeBinAlpha = chkIncludeNac.selected;
				_configData.compressAtlas = chkNeedCompression.selected;
				_configData.advancedCompression = chkAdvCompression.selected;
				_configData.extrudeEdges = chkExtrudeEdges.selected;
				
				_configData.compressionLevel = uint(edtCompressionLevel.text);
				_configData.mipLevels = uint(edtMipLevels.text);
				_configData.textureGap = uint(edtTexturesGap.text);
				
				_configData.label = edtLabel.text;
				_configData.listSourcePath = _sourceFile != null ? [_sourceFile.parent.nativePath] : null;
				_configData.updateClassFileEnabled = chkUpdateClass.selected;
				_configData.updateClassFilePath = _classFile != null ? _classFile.nativePath : "";
				_configData.updateClassFilePackage = edtClassPackage.text;
				_configData.updateAtlasFileEnabled = chkUpdateAtlas.selected;
				_configData.updateAtlasFilePath = _atlasFile != null ? _atlasFile.nativePath : "";
				
				_configData.removeTemp = chkRemove.selected;
				
				ConfigListDataProvider.getInstance().saveConfigData(_configData);
				
				_changed = false;
			}
			
			private function checkClassName(name:String):Boolean
			{
				if (name == null)
				{
					return false;
				}
				
				var matches:Array = name.match(/^(?!\d+)\w+$/g);
				return matches != null && matches.length > 0;
			}
			
			private function onSaveFileChoosen(event:Event):void
			{
				var file:File = event.target as File;
				
				if(!file.extension || file.extension != "dat"){
					trace("no extension");
					file.nativePath += ".dat";
				}
				
				_configData.path = file.nativePath;
				save();
			}
			
			private function close():void
			{
				PopUpManager.removePopUp(this);
			}
			
			private function btnSave_clickHandler(event:MouseEvent):void
			{
				save();
			}
			
			private function btnCancel_clickHandler(event:MouseEvent):void
			{
				if (_changed)
				{
					Alert.show("Exit without saving?", "Discard changes", Alert.YES | Alert.CANCEL, this, onDiscardAlertClosed); 
				}
				else
				{
					close();
				}
			}
			
			private var _changed:Boolean = false;
			private function onChange(event:Event):void
			{
				_changed = true;
				
				chkUpdateClass.enabled = chkGenerateClass.selected;
				chkUpdateClass.selected = chkUpdateClass.selected && chkGenerateClass.selected;
				
				btnClassSource.enabled = chkUpdateClass.selected;
				labelClassPath.enabled = chkUpdateClass.selected;
				edtClassPackage.enabled = chkUpdateClass.selected;
				
				btnAtlasSource.enabled = chkUpdateAtlas.selected;
				labelAtlasPath.enabled = chkUpdateAtlas.selected;
			}
			
			private function onDiscardAlertClosed(event:CloseEvent):void
			{
				switch(event.detail)
				{
					case Alert.YES:
					{
						close();
						break;
					}
						
					case Alert.CANCEL:
					{
						break;
					}
						
					default:
					{
						break;
					}
				}
			}
			
			private function btnSource_clickHandler(event:MouseEvent):void
			{
				var so:SharedObject = SharedObject.getLocal("PngToAtlasSettings");
				var lastPath:String = so.data.lastPath;
				
				var file:File = new File(lastPath);
				file.addEventListener(Event.SELECT, onSourceFileChosen);
				file.browseForOpen("Select source file...", [new FileFilter("PNG Image", "*.png")]);
			}
			
			private function onSourceFileChosen(event:Event):void
			{
				_sourceFile = event.target as File;
				labelSource.text = _sourceFile.nativePath;
				onChange(null);
			}
			
			private function btnClass_clickHandler(event:MouseEvent):void
			{
				var so:SharedObject = SharedObject.getLocal("PngToAtlasSettings");
				var lastPath:String = so.data.lastPath;
				
				var file:File = new File(lastPath);
				file.addEventListener(Event.SELECT, onClassFileChosen);
				file.browseForOpen("Select class file...", [new FileFilter("AS class", "*.as")]);
			}
			
			private function onClassFileChosen(event:Event):void
			{
				_classFile = event.target as File;
				labelClassPath.text = _classFile.nativePath;
				onChange(null);
			}
			
			private function btnAtlas_clickHandler(event:MouseEvent):void
			{
				var so:SharedObject = SharedObject.getLocal("PngToAtlasSettings");
				var lastPath:String = so.data.lastPath;
				
				var file:File = new File(lastPath);
				file.addEventListener(Event.SELECT, onAtlasFileChosen);
				if (chkNeedCompression.selected)
				{	
					file.browseForOpen("Select atlas file...", [new FileFilter("ARF atlas file", "*.arf")]);
				}
				else
				{
					file.browseForOpen("Select atlas file...", [new FileFilter("BRF atlas file", "*.brf")]);
				}
			}
			
			private function onAtlasFileChosen(event:Event):void
			{
				_atlasFile = event.target as File;
				labelAtlasPath.text = _atlasFile.nativePath;
				onChange(null);
			}
			
			private function selectTitleInput(event:Event = null):void
			{
				stage.focus = edtLabel;
			}
			
			protected function chkNeedCompression_clickHandler(event:MouseEvent):void
			{
				chkDXT.enabled = chkNeedCompression.selected;
				chkAdvCompression.selected = false;
				chkAdvCompression.enabled = !chkNeedCompression.selected;
			}
			
			protected function chkAdvCompression_clickHandler(event:MouseEvent):void
			{
				chkNeedCompression.selected = false;
				chkNeedCompression.enabled = !chkAdvCompression.selected;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:TextInput id="edtLabel" x="10" y="10" width="378" prompt="Config Title" change="onChange(event)"/>
	<s:Label x="6" y="174" width="113" height="29" text="ATF Compression level (30 is default):"/>
	<s:TextInput id="edtCompressionLevel" x="129" y="174" width="48" text="30" change="onChange(event)"/>
	<s:Label x="6" y="211" text="Mip levels:"/>
	<s:TextInput id="edtMipLevels" x="129" y="208" width="50" text="0" change="onChange(event)"/>
	<s:Label x="215" y="178" text="Textures gap:"/>
	<s:TextInput id="edtTexturesGap" x="306" y="174" width="45" text="1" change="onChange(event)"/>
	<s:CheckBox id="chkNeedCompression" x="10" y="78" label="ATF Compression" change="onChange(event)"
				click="chkNeedCompression_clickHandler(event)" selected="true"/>
	<s:CheckBox id="chkIncludeNac" x="10" y="110" width="163" label="Include binary alpha data"
				selected="false" change="onChange(event)"/>
	<s:CheckBox id="chkAsSpriteSheet" x="10" y="126" label="Combine as SpriteSheet" change="onChange(event)"/>
	<s:CheckBox id="chkCropImage" x="10" y="142" label="Crop whitespace" change="onChange(event)"/>
	<s:CheckBox id="chkHighlights" x="248" y="78" label="Create highlights" change="onChange(event)"/>
	<s:CheckBox id="chkGenerateClass" x="248" y="94" label="Generate class" change="onChange(event)"/>
	<s:CheckBox id="chkEmbedSap" x="248" y="110" label="Embed animation" change="onChange(event)"/>
	<s:CheckBox id="chkExtrudeEdges" x="248" y="126" label="Extrude edges" change="onChange(event)"/>
	<s:Label id="labelSource" x="88" y="53" width="303" maxDisplayedLines="2" text="source path"/>
	<s:Label id="labelClassPath" x="88" y="260" width="303" maxDisplayedLines="2" text="source path"/>
	<s:Label id="labelAtlasPath" x="88" y="342" width="303" maxDisplayedLines="2" text="source path"/>
	<s:Button id="btnAtlasSource" x="10" y="338" label="Atlas"
			  click="btnAtlas_clickHandler(event)"/>
	<s:CheckBox id="chkUpdateAtlas" x="10" y="314" label="Update atlas file" change="onChange(event)"/>
	<s:Button id="btnClassSource" x="10" y="259" label="Class"
			  click="btnClass_clickHandler(event)"/>
	<s:Button id="btnSource" x="10" y="49" label="Source"
			  click="btnSource_clickHandler(event)"/>
	<s:CheckBox id="chkUpdateClass" x="10" y="235" label="Update class file" change="onChange(event)"/>
	<s:CheckBox id="chkRemove" x="10" y="367" label="Remove Temp" change="onChange(event)"/>
	<s:Button id="btnSave" x="109" y="389" label="Save" click="btnSave_clickHandler(event)"/>
	<s:Button id="btnCancel" x="215" y="389" label="Exit" click="btnCancel_clickHandler(event)"/>
	<s:TextInput id="edtClassPackage" x="10" y="288" width="378" prompt="class package" change="onChange(event)"/>
	<s:CheckBox id="chkDXT" x="143" y="78" label="DXT1/5"/>
	<s:CheckBox id="chkAdvCompression" x="10" y="94" label="Bitmap compression"
				click="chkAdvCompression_clickHandler(event)" enabled="false" selected="false"/>
</s:Panel>
