<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="spark.components.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="components.*"
		 xmlns:layouts="spark.layouts.*"
		 width="300" height="300">
	
	<fx:Script>
		<![CDATA[
			import flash.sampler.getMemberNames;
			import flash.utils.describeType;
			import flash.utils.getDefinitionByName;
			import flash.utils.getQualifiedClassName;
			
			import molehill.core.sprite.Sprite3D;
			import molehill.core.sprite.Sprite3DContainer;
			import molehill.core.text.TextField3D;
			import molehill.easy.ui3d.Sprite3D9Scale;
			import molehill.easy.ui3d.TiledSprite3D;
			
			import mx.controls.HRule;
			
			private var _sprite:Sprite3D;
			public function get sprite():Sprite3D
			{
				return _sprite;
			}
			
			public function set sprite(value:Sprite3D):void
			{
				_sprite = value;
				update();
			}
			
			private var _hashEditsByProperty:Dictionary;
			private function update():void
			{
				_hashEditsByProperty = new Dictionary();
				for (var i:int = 0; i < grpProperties.numElements; i++)
				{
					grpProperties.getElementAt(i).removeEventListener(Event.CHANGE, onEditChanged);
				}
				grpProperties.removeAllElements();
				
				if (_sprite == null)
				{
					return;
				}
				
				var def:XML = describeType(_sprite);
				
				var accessors:XMLList = def['accessor'].(@access=='readwrite');
				var accessorsNumeric:XMLList = accessors.(@type=='Number' || @type=='int' || @type=='uint');
				var accessorsString:XMLList = accessors.(@type=='String');
				var accessorsBoolean:XMLList = accessors.(@type=='Boolean');
				var accessorsOthers:XMLList = accessors.(@type!='Number' && @type!='int' && @type!='uint' && @type!='Boolean' && @type!='String');
				
				var alphabeticNames:Array = [];
				for each (var node:XML in accessorsNumeric) 
				{
					alphabeticNames.push(node.@name);
				}
				alphabeticNames.sort();
				
				for (i = 0; i < alphabeticNames.length; i++)
				{
					var numericEdit:SpinNumericEdit = new SpinNumericEdit();
					numericEdit.width = 270;
					numericEdit.label = alphabeticNames[i];
					numericEdit.value = _sprite[alphabeticNames[i]];
					
					_hashEditsByProperty[numericEdit] = alphabeticNames[i];
					
					grpProperties.addElement(numericEdit);
					
					numericEdit.addEventListener(Event.CHANGE, onEditChanged);
				}
				
				var hRule:HRule = new HRule();
				hRule.width = 270;
				grpProperties.addElement(hRule);
				
				// ----------
				
				alphabeticNames = [];
				for each (node in accessorsString) 
				{
					alphabeticNames.push(node.@name);
				}
				alphabeticNames.sort();
				
				for (i = 0; i < alphabeticNames.length; i++)
				{
					var labeledEdit:LabeledEdit = new LabeledEdit();
					labeledEdit.width = 270;
					labeledEdit.label = alphabeticNames[i];
					labeledEdit.value = _sprite[alphabeticNames[i]];
					
					_hashEditsByProperty[labeledEdit] = alphabeticNames[i];
					
					grpProperties.addElement(labeledEdit);
					
					labeledEdit.addEventListener(Event.CHANGE, onEditChanged);
				}
				
				hRule = new HRule();
				hRule.width = 270;
				grpProperties.addElement(hRule);
				
				// ----------
				
				alphabeticNames = [];
				for each (node in accessorsBoolean) 
				{
					alphabeticNames.push(node.@name);
				}
				alphabeticNames.sort();
				
				for (i = 0; i < alphabeticNames.length; i++)
				{
					var labeledBoolean:LabeledBooleanSelector = new LabeledBooleanSelector();
					labeledBoolean.width = 270;
					labeledBoolean.label = alphabeticNames[i];
					labeledBoolean.value = _sprite[alphabeticNames[i]];
					
					_hashEditsByProperty[labeledBoolean] = alphabeticNames[i];
					
					grpProperties.addElement(labeledBoolean);
					
					labeledBoolean.addEventListener(Event.CHANGE, onEditChanged);
				}
			}
			
			public static const IGNORE_CONTAINER_PROP_CHANGES:Array = ['width', 'height'];
			private function onEditChanged(event:Event):void
			{
				var propName:String = _hashEditsByProperty[event.currentTarget];
				if (_sprite is Sprite3DContainer && !(_sprite is TiledSprite3D) && !(_sprite is TextField3D) && !(_sprite is Sprite3D9Scale))
				{
					if (IGNORE_CONTAINER_PROP_CHANGES.indexOf(propName) != -1)
					{
						return;
					}
				}
				
				_sprite[propName] = event.currentTarget['value'];
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Scroller id="scrProperties" x="0" y="0" width="100%" height="100%">
		<s:Group id="grpProperties" width="100%" height="100%">
			<s:layout>
				<layouts:VerticalLayout/>
			</s:layout>
		</s:Group>
	</s:Scroller>
</s:Group>
