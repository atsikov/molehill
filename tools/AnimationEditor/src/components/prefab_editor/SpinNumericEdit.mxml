<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="spark.components.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="216" height="23">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			
			private var _label:String;
			
			[Inspectable(defaultValue="Label")]
			public function get label():String
			{
				return _label;
			}
			
			[Inspectable(defaultValue="Label")]
			public function set label(value:String):void
			{
				_label = value;
				lblLabel.text = value;
			}
			
			public function get value():Number
			{
				return _baseValue + spnValue.value;
			}
			
			public function set value(val:Number):void
			{
				_baseValue = val;
				spnValue.value = 0;
				edtValue.text = _baseValue.toString();
			}
			
			private var _baseValue:Number = 0;
			protected function edtValue_changeHandler(event:TextOperationEvent):void
			{
				if (isNaN(Number(edtValue.text)))
				{
					value = value;
				}
				else
				{
					spnValue.value = 0;
					_baseValue = Number(edtValue.text);
				}
				
				dispatchEvent(
					new Event(Event.CHANGE)
				);
			}
			
			protected function lblLabel_updateCompleteHandler(event:FlexEvent):void
			{
				edtValue.left = lblLabel.width + 8;
			}
			
			protected function spnValue_valueCommitHandler(event:FlexEvent):void
			{
				edtValue.text = Number(_baseValue + (event.currentTarget as Spinner).value).toString();
				
				dispatchEvent(
					new Event(Event.CHANGE)
				);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	
	<s:Label id="lblLabel" x="3" y="6" text="Label"
			 updateComplete="lblLabel_updateCompleteHandler(event)"/>
	<s:TextInput id="edtValue" y="0" left="48" right="12" height="23"
				 change="edtValue_changeHandler(event)"/>
	<s:Spinner id="spnValue" y="0" right="0" width="13" maximum="{int.MAX_VALUE}" minimum="{int.MIN_VALUE}"
			   snapInterval="1" valueCommit="spnValue_valueCommitHandler(event)"/>
</s:Group>
